digraph ARG {
node [style="filled" shape="box" color="white"]
0 [fillcolor="cornflowerblue" label="0 @ N1\nmain entry\nAbstractionState: ABS0: true\n ValueAnalysisState: []\n" id="0"]
1 [label="1 @ N19\nmain\nValueAnalysisState: []\n" id="1"]
2 [label="2 @ N20\nmain\nValueAnalysisState: []\n" id="2"]
3 [label="3 @ N21\nmain\nValueAnalysisState: []\n" id="3"]
4 [label="4 @ N22\nmain\nValueAnalysisState: []\n" id="4"]
5 [label="5 @ N2\nmain\nValueAnalysisState: []\n" id="5"]
6 [label="6 @ N3\nmain\nValueAnalysisState: []\n" id="6"]
7 [label="7 @ N4\nmain\nValueAnalysisState: []\n" id="7"]
8 [label="8 @ N5\nmain\nValueAnalysisState: []\n" id="8"]
9 [label="9 @ N6\nmain\nValueAnalysisState: []\n" id="9"]
11 [label="11 @ N9\nmain\nValueAnalysisState: []\n" id="11"]
13 [label="13 @ N14\nmain\nValueAnalysisState: []\n" id="13"]
14 [label="14 @ N17\nmain\nValueAnalysisState: []\n" id="14"]
15 [label="15 @ N7\nmain\nValueAnalysisState: []\n" id="15"]
22 [label="22 @ N0\nmain exit\nValueAnalysisState: [main::__retval__=NumericValue[number=0] (int)]\n" id="22"]
12 [label="12 @ N13\nmain\nValueAnalysisState: []\n" id="12"]
16 [label="16 @ N15\nmain\nValueAnalysisState: []\n" id="16"]
18 [fillcolor="red" label="18 @ N16\nmain\nAbstractionState: ABS1: true\n ValueAnalysisState: []\n AutomatonState: AssertionAutomaton: _predefinedState_ERROR\n" id="18"]
10 [label="10 @ N8\nmain\nValueAnalysisState: []\n" id="10"]
19 [label="19 @ N10\nmain\nValueAnalysisState: []\n" id="19"]
21 [fillcolor="red" label="21 @ N11\nmain\nAbstractionState: ABS2: true\n ValueAnalysisState: []\n AutomatonState: AssertionAutomaton: _predefinedState_ERROR\n" id="21"]
0 -> 1 [color="red" label="Line 0: \lINIT GLOBAL VARS\l" id="0 -> 1"]
1 -> 2 [color="red" label="Line 10: \lint __VERIFIER_nondet_int();\l" id="1 -> 2"]
2 -> 3 [color="red" label="Line 11: \lvoid __assert_fail();\l" id="2 -> 3"]
3 -> 4 [color="red" label="Line 13: \lint main(int argc, char *argv[]);\l" id="3 -> 4"]
4 -> 5 [color="red" label="Line 0: \lFunction start dummy edge\l" id="4 -> 5"]
5 -> 6 [color="red" label="Line 15: \lint password;\l" id="5 -> 6"]
6 -> 7 [color="red" label="Line 15: \lpassword = __VERIFIER_nondet_int();\l" id="6 -> 7"]
7 -> 8 [color="red" label="Line 16: \lprintf('Please enter your password here: ');\l" id="7 -> 8"]
8 -> 9 [color="red" label="Line 17: \lscanf('%d', &password);\l" id="8 -> 9"]
9 -> 10 [color="red" label="Line 19: \l[password == 543210]\l" id="9 -> 10"]
9 -> 11 [color="red" label="Line 19: \l[!(password == 543210)]\l" id="9 -> 11"]
11 -> 12 [color="red" label="Line 24: \l[password == 10000]\l" id="11 -> 12"]
11 -> 13 [label="Line 24: \l[!(password == 10000)]\l" id="11 -> 13"]
13 -> 14 [label="Line 30: \lprintf('Error: Incorrect Password \n');\l" id="13 -> 14"]
14 -> 15 [label="Line 0: \l\l" id="14 -> 15"]
15 -> 22 [label="Line 31: \lreturn 0;\l" id="15 -> 22"]
12 -> 16 [color="red" label="Line 25: \lprintf('Welcome 2\n');\l" id="12 -> 16"]
16 -> 18 [color="red" label="Line 27: \l__assert_fail();\l" id="16 -> 18"]
10 -> 19 [color="red" label="Line 20: \lprintf('Welcome \n');\l" id="10 -> 19"]
19 -> 21 [color="red" label="Line 22: \l__assert_fail();\l" id="19 -> 21"]
}
