digraph ARG {
node [style="filled" shape="box" color="white"]
2 [fillcolor="cornflowerblue" label="2 @ N1\nmain entry\nAbstractionState: ABS1: true\n" id="2"]
6 [label="6 @ N21\nmain\n" id="6"]
20 [label="20 @ N7\nmain\n" id="20"]
22 [fillcolor="cornflowerblue" label="22 @ N8\nmain\nAbstractionState: ABS2: true\n" id="22"]
24 [label="24 @ N10\nmain\n" id="24"]
25 [label="25 @ N0\nmain exit\n" id="25"]
23 [label="23 @ N9\nmain\n" id="23"]
31 [label="31 @ N16\nmain\n" id="31"]
33 [fillcolor="orange" label="33 @ N17\nmain\n" id="33"]
32 [label="32 @ N18\nmain\n" id="32"]
54 [fillcolor="red" label="54 @ N19\nmain\nAbstractionState: ABS4: true\n AutomatonState: AssertionAutomaton: _predefinedState_ERROR\n" id="54"]
2 -> 6 [color="red" label="Line 0: \lINIT GLOBAL VARS\l" id="2 -> 6"]
6 -> 20 [color="red" label="Lines 9 - 15: \lunsigned int __VERIFIER_nondet_uint();\lvoid __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function);\lint main();\lFunction start dummy edge\lunsigned n;\ln = __VERIFIER_nondet_uint();\lunsigned x;\lx = __VERIFIER_nondet_uint();\lunsigned y = n - x;\l" id="6 -> 20"]
20 -> 22 [color="red" label="Line 16: \lwhile\l" id="20 -> 22"]
22 -> 23 [color="red" label="Line 16: \l[x > y]\l" id="22 -> 23"]
22 -> 24 [label="Line 16: \l[!(x > y)]\l" id="22 -> 24"]
24 -> 25 [label="Line 23: \lreturn 0;\l" id="24 -> 25"]
23 -> 31 [color="red" label="Lines 17 - 18: \lconst unsigned __CPAchecker_TMP_0 = x;\lx = x - 1;\l__CPAchecker_TMP_0;\lconst unsigned __CPAchecker_TMP_1 = y;\ly = y + 1;\l__CPAchecker_TMP_1;\l" id="23 -> 31"]
31 -> 32 [color="red" label="Line 19: \l[x < y]\l" id="31 -> 32"]
31 -> 33 [label="Line 19: \l[!(x < y)]\l" id="31 -> 33"]
32 -> 54 [color="red" label="Line 20: \l__assert_fail('0', 'example-unsafe.c', 20, 'main');\l" id="32 -> 54"]
}
