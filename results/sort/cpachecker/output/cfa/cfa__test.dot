digraph test {
84 [shape="circle" label="N84\n21"]
85 [shape="circle" label="N85\n20"]
86 [shape="circle" label="N86\n19"]
87 [shape="circle" label="N87\n18"]
90 [shape="doublecircle" label="N90\n15"]
92 [shape="circle" label="N92\n10"]
93 [shape="circle" label="N93\n14"]
94 [shape="diamond" label="N94\n9"]
95 [shape="circle" label="N95\n7"]
96 [shape="circle" label="N96\n8"]
97 [shape="circle" label="N97\n6"]
98 [shape="diamond" label="N98\n5"]
100 [shape="circle" label="N100\n2"]
101 [shape="circle" label="N101\n4"]
99 [shape="circle" label="N99\n1"]
556 [shape="circle" label="N556\n0"]
76 [style="filled,bold" penwidth="1" fillcolor="white" fontname="Courier New" shape="Mrecord" label=<<table border="0" cellborder="0" cellpadding="3" bgcolor="white"><tr><td align="right">76</td><td align="left">Function start dummy edge</td></tr><tr><td align="right">77</td><td align="left">int *temp1;</td></tr><tr><td align="right">78</td><td align="left">temp1 = malloc(4UL * nelem);</td></tr><tr><td align="right">79</td><td align="left">int *temp2;</td></tr><tr><td align="right">80</td><td align="left">temp2 = malloc(4UL * nelem);</td></tr><tr><td align="right">81</td><td align="left">printf(\&quot;input: [%d, %d, %d, %d]\n\&quot;, array[0], array[1], array[2], array[3]);</td></tr><tr><td align="right">82</td><td align="left">memcpy(temp1, array, 16UL);</td></tr><tr><td align="right">83</td><td align="left">memcpy(temp2, array, 16UL);</td></tr></table>>]
76 -> 84[label=""]
87 [style="filled,bold" penwidth="1" fillcolor="white" fontname="Courier New" shape="Mrecord" label=<<table border="0" cellborder="0" cellpadding="3" bgcolor="white"><tr><td align="right">87</td><td align="left">printf(\&quot;bubble_sort   : [%d, %d, %d, %d]\n\&quot;, temp2[0], temp2[1], temp2[2], temp2[3]);</td></tr><tr><td align="right">88</td><td align="left">for</td></tr><tr><td align="right">89</td><td align="left">unsigned i = 0;</td></tr></table>>]
87 -> 90[label=""]
93 [style="filled,bold" penwidth="1" fillcolor="white" fontname="Courier New" shape="Mrecord" label=<<table border="0" cellborder="0" cellpadding="3" bgcolor="white"><tr><td align="right">93</td><td align="left">free(temp1);</td></tr><tr><td align="right">103</td><td align="left">free(temp2);</td></tr><tr><td align="right">104</td><td align="left">default return</td></tr></table>>]
93 -> 75[label=""]
99 [style="filled,bold" penwidth="1" fillcolor="white" fontname="Courier New" shape="Mrecord" label=<<table border="0" cellborder="0" cellpadding="3" bgcolor="white"><tr><td align="right">99</td><td align="left"></td></tr><tr><td align="right">91</td><td align="left">i = i + 1;</td></tr></table>>]
99 -> 90[label=""]
100001 [shape="component" label="insertion_sort"]
84 -> 100001 [label="insertion_sort(temp1, 4);" fontname="Courier New"]
100001 -> 85 [label="" fontname="Courier New"]
84 -> 85 [label="insertion_sort(temp1, 4);" fontname="Courier New"]
100002 [shape="component" label="bubble_sort"]
85 -> 100002 [label="bubble_sort(temp2, 4);" fontname="Courier New"]
100002 -> 86 [label="" fontname="Courier New"]
85 -> 86 [label="bubble_sort(temp2, 4);" fontname="Courier New"]
86 -> 87 [label="printf(\"insertion_sort: [%d, %d, %d, %d]\n\", temp1[0], temp1[1], temp1[2], temp1[3]);" fontname="Courier New"]
90 -> 92 [label="[i != nelem]" fontname="Courier New"]
90 -> 93 [label="[!(i != nelem)]" fontname="Courier New"]
92 -> 94 [label="int __CPAchecker_TMP_1;" fontname="Courier New"]
94 -> 95 [label="[(temp1[i]) == (temp2[i])]" fontname="Courier New"]
94 -> 96 [label="[!((temp1[i]) == (temp2[i]))]" fontname="Courier New"]
97 -> 98 [label="4UL;" fontname="Courier New"]
98 -> 100 [label="[(temp1[i]) == (temp2[i])]" fontname="Courier New"]
98 -> 101 [label="[!((temp1[i]) == (temp2[i]))]" fontname="Courier New"]
100 -> 99 [label="" fontname="Courier New"]
95 -> 97 [label="__CPAchecker_TMP_1 = 1;" fontname="Courier New"]
96 -> 97 [label="__CPAchecker_TMP_1 = 0;" fontname="Courier New"]
101 -> 556 [label="__assert_fail(\"temp1[i] == temp2[i]\", \"code.c\", 68, \"__PRETTY_FUNCTION__\");" fontname="Courier New"]
}